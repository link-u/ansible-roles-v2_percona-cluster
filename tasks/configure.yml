---
# tasks/configure.yml (percona-cluster)
# Prefix : pxc

- name: Ensure data directories are present with proper owner
  file:
    path: "{{ item }}"
    state: directory
    owner: mysql
    group: mysql
    mode: "0755"
  loop:
    - "{{ __pxc_combined_mycnf_settings['datadir'] }}"
    - "{{ __pxc_combined_clustering_settings['wsrep_data_home_dir'] }}"

- name: Ensure log-bin directories are present with proper owner
  file:
    path: "{{ __pxc_combined_mycnf_settings['log-bin'] }}"
    state: directory
    owner: mysql
    group: mysql
    mode: "0750"

- name: "Check for existing {{ __pxc_combined_clustering_settings['wsrep_data_home_dir'] }}/grastate.dat"
  stat:
    path: "{{ __pxc_combined_clustering_settings['wsrep_data_home_dir'] }}/grastate.dat"
  register: __pxc_check_grastate_dat

- name: Initialize grastate.dat
  copy:
    src: "/var/lib/mysql/grastate.dat"
    dest: "{{ __pxc_combined_clustering_settings['wsrep_data_home_dir'] }}/grastate.dat"
    owner: mysql
    group: mysql
    mode: "0640"
    remote_src: True
    force: False
  when:
    - not __pxc_check_grastate_dat.stat.exists

##FIXME(y-hashida): when の条件が雑すぎるので修正したい.
- name: Ensure doublewrite directory is present with proper owner
  file:
    path: "{{ __pxc_combined_general_settings['innodb_parallel_doublewrite_path'] | dirname }}"
    state: directory
    owner: mysql
    group: mysql
    mode: "0755"
  when:
    - __pxc_combined_general_settings['innodb_parallel_doublewrite_path'] != "xb_doublewrite"

## /etc/mysql/timezone_db_is_imported.create_by_ansible.txt が存在するかどうかを確認するタスク
#  * このファイルの有無でタイムゾーン用のテーブルをインポートしているかどうかを判断できるようになる.
- name: Check to exist /etc/mysql/timezone_db_is_imported.create_by_ansible.txt
  stat:
    path: "/etc/mysql/timezone_db_is_imported.create_by_ansible.txt"
  register: __pxc_imported_timezone_table

## my.cnf を作成するタスク
#  * 以下の条件をすべて満たす時, default_time_zone の値を null にする
#    * /etc/mysql/timezone_db_is_imported.create_by_ansible.txt が存在しない.
#    * __pxc_combined_general_settings.default_time_zone が定義されている
#
#  * 上記の条件を付ける理由について
#    * timezone の設定は PXC が起動した後に実行する必要がある.
#    * しかし, インストール直後はまだ PXC は起動していない.
#    * さらに, my.cnf の作成は起動前に一度しておく必要がある.
#
#    これらの理由のため, 上記の条件にヒットする場合は一度
#    タイムゾーン設定を無視して, PXC を起動する必要がある.
- name: Create my.cnf
  template:
    src: my.cnf.j2
    dest: "{{ pxc_mycnf_path }}"
    owner: root
    group: root
    mode: "0644"
  vars:
    ## 少し分かりづらいのでやっていることの解説
    #  * タイムゾーン用のテーブルがインポートされていない場合
    #    (つまり, __pxc_imported_timezone_table.stat.exists が false の場合), 
    #    __pxc_combined_general_settings.default_time_zone を null (Jinja2 では None) にしている.
    __pxc_combined_general_settings: |
      {{
        __pxc_defaults_general_settings |
        combine(pxc_general_settings, recursive=True) |
        combine(
          ( __pxc_imported_timezone_table.stat.exists) | ternary({}, { 'default_time_zone': None } ),
          recursive=True
        ) }}

- name: Bootstrap cluster
  import_tasks: bootstrap.yml

- name: Check default password for root user
  debug:
    msg: "Please change password for root user from default"
  failed_when: True
  when:
    - pxc_root_password == "default&root&password"

- name: Set root password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ pxc_root_password }}"
    login_user: root
    login_password: "{{ pxc_root_password }}"
    login_unix_socket: "{{ pxc_socket }}"
    login_host: "localhost"
  no_log: True
  loop:
    - 127.0.0.1
    - ::1
    - localhost
  when:
    - inventory_hostname == pxc_db_control_node

## MySQL のタイムゾーンを設定するためのテーブルをインポートするタスク
- name: Add timezone table
  import_tasks: add_timezone_table.yml
  when:
    - __pxc_combined_general_settings.default_time_zone is defined
    - __pxc_combined_general_settings.default_time_zone != None
    - not __pxc_imported_timezone_table.stat.exists

## my.cnf を改めて作成するタスク
#  * こちらは default_time_zone もちゃんと反映させる.
- name: Re-create my.cnf
  template:
    src: my.cnf.j2
    dest: "{{ pxc_mycnf_path }}"
    owner: root
    group: root
    mode: "0644"

## SET GLOBAL 可能なシステム変数を適用するタスク
#  以下のように pxc_general_settings の定義方法1と2の両方に対応するような書き方となっている
#
#  pxc_general_settings:
#    max_allowed_packet: "41943040"  # 定義方法1
#    default_time_zone:              # 定義方法2
#      variable: "time_zone"
#      value: "UTC"
#
#  このような書き方をする理由は, 例えばタイムゾーンを設定するためには, 
#
#    * my.cnf では 「default_time_zone = UTC」 と書く
#    * SET GLOBAL クエリを使う場合は「SET GLOBAL time_zone = UTC;」を実行する
#
#  という風に変数名が違う.
#  これらの事例に対応するために, 定義方法1と2の両方を実装している.
- name: Update mysql pxc_general_settings (not required to restart)
  mysql_variables:
    connect_timeout: 600
    login_user: root
    login_password: "{{ pxc_root_password }}"
    login_unix_socket: "{{ pxc_socket }}"
    login_host: "localhost"
    variable: "{{ item.value.variable | default(item.key) }}"
    value: "{{ item.value.value | default(item.value) }}"
  when: item.value != None
  loop: "{{ __pxc_combined_general_settings | dict2items }}"

- name: Create mysql users
  mysql_user:
    name: "{{ item[0].name }}"
    password: "{{ item[0].password | default(item[0].name) }}"
    host: "{{ item[1] }}"
    priv: "{{ item[0].priv | default('*.*:ALL,GRANT') }}"
    login_user: root
    login_password: "{{ pxc_root_password }}"
    login_unix_socket: "{{ pxc_socket }}"
    login_host: "localhost"
  loop: "{{ pxc_users | subelements('hosts') }}"
  when:
    - inventory_hostname == pxc_db_control_node

- name: Create mysql DB
  mysql_db:
    name: "{{ item.name }}"
    encoding: "{{ item.encoding | default('utf8') }}"
    collation: "{{ item.collation | default('') }}"
    login_user: "{{ item.login_user | default('root') }}"
    login_password: "{{ item.login_password | default(pxc_root_password) }}"
    login_unix_socket: "{{ pxc_socket }}"
    login_host: "localhost"
  loop: "{{ pxc_databases }}"
  when:
    - inventory_hostname == pxc_db_control_node

- name: Setting logrotate
  import_tasks: logrotate.yml
